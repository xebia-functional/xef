/**
 * Please note: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
@file:Suppress("ArrayInDataClass", "EnumEntryName", "RemoveRedundantQualifierName", "UnusedImport")

package com.xebia.functional.openai.apis

import com.xebia.functional.openai.infrastructure.*
import com.xebia.functional.openai.models.CreateFineTuneRequest
import com.xebia.functional.openai.models.FineTune
import com.xebia.functional.openai.models.ListFineTuneEventsResponse
import com.xebia.functional.openai.models.ListFineTunesResponse
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.Json

open class FineTunesApi : ApiClient {

  constructor(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    jsonSerializer: Json = ApiClient.JSON_DEFAULT
  ) : super(
    baseUrl = baseUrl,
    httpClientEngine = httpClientEngine,
    httpClientConfig = httpClientConfig,
    jsonBlock = jsonSerializer
  )

  constructor(
    baseUrl: String,
    httpClient: HttpClient
  ) : super(baseUrl = baseUrl, httpClient = httpClient)

  /**
   * Immediately cancel a fine-tune job.
   *
   * @param fineTuneId The ID of the fine-tune job to cancel
   * @return FineTune
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun cancelFineTune(fineTuneId: kotlin.String): HttpResponse<FineTune> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = io.ktor.client.utils.EmptyContent

    val localVariableQuery = mutableMapOf<String, List<String>>()
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.POST,
        "/fine-tunes/{fine_tune_id}/cancel".replace("{" + "fine_tune_id" + "}", "$fineTuneId"),
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return request(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /**
   * Creates a job that fine-tunes a specified model from a given dataset. Response includes details
   * of the enqueued job including job status and the name of the fine-tuned models once complete.
   * [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)
   *
   * @param createFineTuneRequest
   * @return FineTune
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun createFineTune(
    createFineTuneRequest: CreateFineTuneRequest
  ): HttpResponse<FineTune> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = createFineTuneRequest

    val localVariableQuery = mutableMapOf<String, List<String>>()
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.POST,
        "/fine-tunes",
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return jsonRequest(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /**
   * Get fine-grained status updates for a fine-tune job.
   *
   * @param fineTuneId The ID of the fine-tune job to get events for.
   * @param stream Whether to stream events for the fine-tune job. If set to true, events will be
   *   sent as data-only
   *   [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
   *   as they become available. The stream will terminate with a &#x60;data: [DONE]&#x60; message
   *   when the job is finished (succeeded, cancelled, or failed). If set to false, only events
   *   generated so far will be returned. (optional, default to false)
   * @return ListFineTuneEventsResponse
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun listFineTuneEvents(
    fineTuneId: kotlin.String,
    stream: kotlin.Boolean? = false
  ): HttpResponse<ListFineTuneEventsResponse> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = io.ktor.client.utils.EmptyContent

    val localVariableQuery = mutableMapOf<String, List<String>>()
    stream?.apply { localVariableQuery["stream"] = listOf("$stream") }
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/fine-tunes/{fine_tune_id}/events".replace("{" + "fine_tune_id" + "}", "$fineTuneId"),
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return request(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /**
   * List your organization&#39;s fine-tuning jobs
   *
   * @return ListFineTunesResponse
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun listFineTunes(): HttpResponse<ListFineTunesResponse> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = io.ktor.client.utils.EmptyContent

    val localVariableQuery = mutableMapOf<String, List<String>>()
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/fine-tunes",
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return request(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /**
   * Gets info about the fine-tune job.
   * [Learn more about fine-tuning](/docs/guides/legacy-fine-tuning)
   *
   * @param fineTuneId The ID of the fine-tune job
   * @return FineTune
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun retrieveFineTune(fineTuneId: kotlin.String): HttpResponse<FineTune> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = io.ktor.client.utils.EmptyContent

    val localVariableQuery = mutableMapOf<String, List<String>>()
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/fine-tunes/{fine_tune_id}".replace("{" + "fine_tune_id" + "}", "$fineTuneId"),
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return request(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }
}
