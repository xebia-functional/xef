/**
 * Please note: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
@file:Suppress("ArrayInDataClass", "EnumEntryName", "RemoveRedundantQualifierName", "UnusedImport")

package com.xebia.functional.openai.models

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * @param instruction The instruction that tells the model how to edit the prompt.
 * @param model
 * @param input The input text to use as a starting point for the edit.
 * @param n How many edits to generate for the input and instruction.
 * @param temperature What sampling temperature to use, between 0 and 2. Higher values like 0.8 will
 *   make the output more random, while lower values like 0.2 will make it more focused and
 *   deterministic. We generally recommend altering this or `top_p` but not both.
 * @param topP An alternative to sampling with temperature, called nucleus sampling, where the model
 *   considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens
 *   comprising the top 10% probability mass are considered. We generally recommend altering this or
 *   `temperature` but not both.
 */
@Serializable
data class CreateEditRequest(

  /* The instruction that tells the model how to edit the prompt. */
  @SerialName(value = "instruction") @Required val instruction: kotlin.String,
  @SerialName(value = "model")
  @Required
  val model: com.xebia.functional.openai.models.ext.edit.create.CreateEditRequestModel,

  /* The input text to use as a starting point for the edit. */
  @SerialName(value = "input") val input: kotlin.String? = "",

  /* How many edits to generate for the input and instruction. */
  @SerialName(value = "n") val n: kotlin.Int? = 1,

  /* What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both.  */
  @SerialName(value = "temperature") val temperature: kotlin.Double? = (1).toDouble(),

  /* An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both.  */
  @SerialName(value = "top_p") val topP: kotlin.Double? = (1).toDouble()
)
