/**
 * Please note: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
@file:Suppress("ArrayInDataClass", "EnumEntryName", "RemoveRedundantQualifierName", "UnusedImport")

package com.xebia.functional.openai.apis

import com.xebia.functional.openai.infrastructure.*
import com.xebia.functional.openai.models.AssistantFileObject
import com.xebia.functional.openai.models.AssistantObject
import com.xebia.functional.openai.models.CreateAssistantFileRequest
import com.xebia.functional.openai.models.CreateAssistantRequest
import com.xebia.functional.openai.models.CreateMessageRequest
import com.xebia.functional.openai.models.CreateRunRequest
import com.xebia.functional.openai.models.CreateThreadAndRunRequest
import com.xebia.functional.openai.models.CreateThreadRequest
import com.xebia.functional.openai.models.DeleteAssistantFileResponse
import com.xebia.functional.openai.models.DeleteAssistantResponse
import com.xebia.functional.openai.models.DeleteThreadResponse
import com.xebia.functional.openai.models.ListAssistantFilesResponse
import com.xebia.functional.openai.models.ListAssistantsResponse
import com.xebia.functional.openai.models.ListMessageFilesResponse
import com.xebia.functional.openai.models.ListMessagesResponse
import com.xebia.functional.openai.models.ListRunStepsResponse
import com.xebia.functional.openai.models.ListRunsResponse
import com.xebia.functional.openai.models.MessageFileObject
import com.xebia.functional.openai.models.MessageObject
import com.xebia.functional.openai.models.ModifyMessageRequest
import com.xebia.functional.openai.models.ModifyRunRequest
import com.xebia.functional.openai.models.ModifyThreadRequest
import com.xebia.functional.openai.models.RunObject
import com.xebia.functional.openai.models.RunStepObject
import com.xebia.functional.openai.models.SubmitToolOutputsRunRequest
import com.xebia.functional.openai.models.ThreadObject
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.engine.HttpClientEngine
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.Json

open class AssistantsApi : ApiClient {

  constructor(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    jsonSerializer: Json = ApiClient.JSON_DEFAULT
  ) : super(
    baseUrl = baseUrl,
    httpClientEngine = httpClientEngine,
    httpClientConfig = httpClientConfig,
    jsonBlock = jsonSerializer
  )

  constructor(
    baseUrl: String,
    httpClient: HttpClient
  ) : super(baseUrl = baseUrl, httpClient = httpClient)

  /**
   * Cancels a run that is &#x60;in_progress&#x60;.
   *
   * @param threadId The ID of the thread to which this run belongs.
   * @param runId The ID of the run to cancel.
   * @return RunObject
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun cancelRun(
    threadId: kotlin.String,
    runId: kotlin.String
  ): HttpResponse<RunObject> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = io.ktor.client.utils.EmptyContent

    val localVariableQuery = mutableMapOf<String, List<String>>()
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.POST,
        "/threads/{thread_id}/runs/{run_id}/cancel"
          .replace("{" + "thread_id" + "}", "$threadId")
          .replace("{" + "run_id" + "}", "$runId"),
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return request(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /**
   * Create an assistant with a model and instructions.
   *
   * @param createAssistantRequest
   * @return AssistantObject
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun createAssistant(
    createAssistantRequest: CreateAssistantRequest
  ): HttpResponse<AssistantObject> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = createAssistantRequest

    val localVariableQuery = mutableMapOf<String, List<String>>()
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.POST,
        "/assistants",
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return jsonRequest(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /**
   * Create an assistant file by attaching a [File](/docs/api-reference/files) to an
   * [assistant](/docs/api-reference/assistants).
   *
   * @param assistantId The ID of the assistant for which to create a File.
   * @param createAssistantFileRequest
   * @return AssistantFileObject
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun createAssistantFile(
    assistantId: kotlin.String,
    createAssistantFileRequest: CreateAssistantFileRequest
  ): HttpResponse<AssistantFileObject> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = createAssistantFileRequest

    val localVariableQuery = mutableMapOf<String, List<String>>()
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.POST,
        "/assistants/{assistant_id}/files".replace("{" + "assistant_id" + "}", "$assistantId"),
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return jsonRequest(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /**
   * Create a message.
   *
   * @param threadId The ID of the [thread](/docs/api-reference/threads) to create a message for.
   * @param createMessageRequest
   * @return MessageObject
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun createMessage(
    threadId: kotlin.String,
    createMessageRequest: CreateMessageRequest
  ): HttpResponse<MessageObject> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = createMessageRequest

    val localVariableQuery = mutableMapOf<String, List<String>>()
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.POST,
        "/threads/{thread_id}/messages".replace("{" + "thread_id" + "}", "$threadId"),
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return jsonRequest(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /**
   * Create a run.
   *
   * @param threadId The ID of the thread to run.
   * @param createRunRequest
   * @return RunObject
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun createRun(
    threadId: kotlin.String,
    createRunRequest: CreateRunRequest
  ): HttpResponse<RunObject> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = createRunRequest

    val localVariableQuery = mutableMapOf<String, List<String>>()
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.POST,
        "/threads/{thread_id}/runs".replace("{" + "thread_id" + "}", "$threadId"),
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return jsonRequest(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /**
   * Create a thread.
   *
   * @param createThreadRequest (optional)
   * @return ThreadObject
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun createThread(
    createThreadRequest: CreateThreadRequest? = null
  ): HttpResponse<ThreadObject> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = createThreadRequest

    val localVariableQuery = mutableMapOf<String, List<String>>()
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.POST,
        "/threads",
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return jsonRequest(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /**
   * Create a thread and run it in one request.
   *
   * @param createThreadAndRunRequest
   * @return RunObject
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun createThreadAndRun(
    createThreadAndRunRequest: CreateThreadAndRunRequest
  ): HttpResponse<RunObject> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = createThreadAndRunRequest

    val localVariableQuery = mutableMapOf<String, List<String>>()
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.POST,
        "/threads/runs",
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return jsonRequest(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /**
   * Delete an assistant.
   *
   * @param assistantId The ID of the assistant to delete.
   * @return DeleteAssistantResponse
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun deleteAssistant(
    assistantId: kotlin.String
  ): HttpResponse<DeleteAssistantResponse> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = io.ktor.client.utils.EmptyContent

    val localVariableQuery = mutableMapOf<String, List<String>>()
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.DELETE,
        "/assistants/{assistant_id}".replace("{" + "assistant_id" + "}", "$assistantId"),
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return request(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /**
   * Delete an assistant file.
   *
   * @param assistantId The ID of the assistant that the file belongs to.
   * @param fileId The ID of the file to delete.
   * @return DeleteAssistantFileResponse
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun deleteAssistantFile(
    assistantId: kotlin.String,
    fileId: kotlin.String
  ): HttpResponse<DeleteAssistantFileResponse> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = io.ktor.client.utils.EmptyContent

    val localVariableQuery = mutableMapOf<String, List<String>>()
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.DELETE,
        "/assistants/{assistant_id}/files/{file_id}"
          .replace("{" + "assistant_id" + "}", "$assistantId")
          .replace("{" + "file_id" + "}", "$fileId"),
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return request(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /**
   * Delete a thread.
   *
   * @param threadId The ID of the thread to delete.
   * @return DeleteThreadResponse
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun deleteThread(threadId: kotlin.String): HttpResponse<DeleteThreadResponse> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = io.ktor.client.utils.EmptyContent

    val localVariableQuery = mutableMapOf<String, List<String>>()
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.DELETE,
        "/threads/{thread_id}".replace("{" + "thread_id" + "}", "$threadId"),
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return request(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /**
   * Retrieves an assistant.
   *
   * @param assistantId The ID of the assistant to retrieve.
   * @return AssistantObject
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun getAssistant(assistantId: kotlin.String): HttpResponse<AssistantObject> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = io.ktor.client.utils.EmptyContent

    val localVariableQuery = mutableMapOf<String, List<String>>()
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/assistants/{assistant_id}".replace("{" + "assistant_id" + "}", "$assistantId"),
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return request(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /**
   * Retrieves an AssistantFile.
   *
   * @param assistantId The ID of the assistant who the file belongs to.
   * @param fileId The ID of the file we&#39;re getting.
   * @return AssistantFileObject
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun getAssistantFile(
    assistantId: kotlin.String,
    fileId: kotlin.String
  ): HttpResponse<AssistantFileObject> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = io.ktor.client.utils.EmptyContent

    val localVariableQuery = mutableMapOf<String, List<String>>()
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/assistants/{assistant_id}/files/{file_id}"
          .replace("{" + "assistant_id" + "}", "$assistantId")
          .replace("{" + "file_id" + "}", "$fileId"),
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return request(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /**
   * Retrieve a message.
   *
   * @param threadId The ID of the [thread](/docs/api-reference/threads) to which this message
   *   belongs.
   * @param messageId The ID of the message to retrieve.
   * @return MessageObject
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun getMessage(
    threadId: kotlin.String,
    messageId: kotlin.String
  ): HttpResponse<MessageObject> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = io.ktor.client.utils.EmptyContent

    val localVariableQuery = mutableMapOf<String, List<String>>()
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/threads/{thread_id}/messages/{message_id}"
          .replace("{" + "thread_id" + "}", "$threadId")
          .replace("{" + "message_id" + "}", "$messageId"),
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return request(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /**
   * Retrieves a message file.
   *
   * @param threadId The ID of the thread to which the message and File belong.
   * @param messageId The ID of the message the file belongs to.
   * @param fileId The ID of the file being retrieved.
   * @return MessageFileObject
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun getMessageFile(
    threadId: kotlin.String,
    messageId: kotlin.String,
    fileId: kotlin.String
  ): HttpResponse<MessageFileObject> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = io.ktor.client.utils.EmptyContent

    val localVariableQuery = mutableMapOf<String, List<String>>()
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/threads/{thread_id}/messages/{message_id}/files/{file_id}"
          .replace("{" + "thread_id" + "}", "$threadId")
          .replace("{" + "message_id" + "}", "$messageId")
          .replace("{" + "file_id" + "}", "$fileId"),
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return request(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /**
   * Retrieves a run.
   *
   * @param threadId The ID of the [thread](/docs/api-reference/threads) that was run.
   * @param runId The ID of the run to retrieve.
   * @return RunObject
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun getRun(threadId: kotlin.String, runId: kotlin.String): HttpResponse<RunObject> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = io.ktor.client.utils.EmptyContent

    val localVariableQuery = mutableMapOf<String, List<String>>()
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/threads/{thread_id}/runs/{run_id}"
          .replace("{" + "thread_id" + "}", "$threadId")
          .replace("{" + "run_id" + "}", "$runId"),
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return request(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /**
   * Retrieves a run step.
   *
   * @param threadId The ID of the thread to which the run and run step belongs.
   * @param runId The ID of the run to which the run step belongs.
   * @param stepId The ID of the run step to retrieve.
   * @return RunStepObject
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun getRunStep(
    threadId: kotlin.String,
    runId: kotlin.String,
    stepId: kotlin.String
  ): HttpResponse<RunStepObject> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = io.ktor.client.utils.EmptyContent

    val localVariableQuery = mutableMapOf<String, List<String>>()
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/threads/{thread_id}/runs/{run_id}/steps/{step_id}"
          .replace("{" + "thread_id" + "}", "$threadId")
          .replace("{" + "run_id" + "}", "$runId")
          .replace("{" + "step_id" + "}", "$stepId"),
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return request(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /**
   * Retrieves a thread.
   *
   * @param threadId The ID of the thread to retrieve.
   * @return ThreadObject
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun getThread(threadId: kotlin.String): HttpResponse<ThreadObject> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = io.ktor.client.utils.EmptyContent

    val localVariableQuery = mutableMapOf<String, List<String>>()
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/threads/{thread_id}".replace("{" + "thread_id" + "}", "$threadId"),
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return request(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /** enum for parameter order */
  @Serializable
  enum class OrderListAssistantFiles(val value: kotlin.String) {

    @SerialName(value = "asc") asc("asc"),
    @SerialName(value = "desc") desc("desc")
  }

  /**
   * Returns a list of assistant files.
   *
   * @param assistantId The ID of the assistant the file belongs to.
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and
   *   100, and the default is 20. (optional, default to 20)
   * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60;
   *   for ascending order and &#x60;desc&#x60; for descending order. (optional, default to desc)
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines
   *   your place in the list. For instance, if you make a list request and receive 100 objects,
   *   ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch
   *   the next page of the list. (optional)
   * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines
   *   your place in the list. For instance, if you make a list request and receive 100 objects,
   *   ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch
   *   the previous page of the list. (optional)
   * @return ListAssistantFilesResponse
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun listAssistantFiles(
    assistantId: kotlin.String,
    limit: kotlin.Int? = 20,
    order: OrderListAssistantFiles? = OrderListAssistantFiles.desc,
    after: kotlin.String? = null,
    before: kotlin.String? = null
  ): HttpResponse<ListAssistantFilesResponse> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = io.ktor.client.utils.EmptyContent

    val localVariableQuery = mutableMapOf<String, List<String>>()
    limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
    order?.apply { localVariableQuery["order"] = listOf("$order") }
    after?.apply { localVariableQuery["after"] = listOf("$after") }
    before?.apply { localVariableQuery["before"] = listOf("$before") }
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/assistants/{assistant_id}/files".replace("{" + "assistant_id" + "}", "$assistantId"),
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return request(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /** enum for parameter order */
  @Serializable
  enum class OrderListAssistants(val value: kotlin.String) {

    @SerialName(value = "asc") asc("asc"),
    @SerialName(value = "desc") desc("desc")
  }

  /**
   * Returns a list of assistants.
   *
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and
   *   100, and the default is 20. (optional, default to 20)
   * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60;
   *   for ascending order and &#x60;desc&#x60; for descending order. (optional, default to desc)
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines
   *   your place in the list. For instance, if you make a list request and receive 100 objects,
   *   ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch
   *   the next page of the list. (optional)
   * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines
   *   your place in the list. For instance, if you make a list request and receive 100 objects,
   *   ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch
   *   the previous page of the list. (optional)
   * @return ListAssistantsResponse
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun listAssistants(
    limit: kotlin.Int? = 20,
    order: OrderListAssistants? = OrderListAssistants.desc,
    after: kotlin.String? = null,
    before: kotlin.String? = null
  ): HttpResponse<ListAssistantsResponse> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = io.ktor.client.utils.EmptyContent

    val localVariableQuery = mutableMapOf<String, List<String>>()
    limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
    order?.apply { localVariableQuery["order"] = listOf("$order") }
    after?.apply { localVariableQuery["after"] = listOf("$after") }
    before?.apply { localVariableQuery["before"] = listOf("$before") }
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/assistants",
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return request(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /** enum for parameter order */
  @Serializable
  enum class OrderListMessageFiles(val value: kotlin.String) {

    @SerialName(value = "asc") asc("asc"),
    @SerialName(value = "desc") desc("desc")
  }

  /**
   * Returns a list of message files.
   *
   * @param threadId The ID of the thread that the message and files belong to.
   * @param messageId The ID of the message that the files belongs to.
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and
   *   100, and the default is 20. (optional, default to 20)
   * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60;
   *   for ascending order and &#x60;desc&#x60; for descending order. (optional, default to desc)
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines
   *   your place in the list. For instance, if you make a list request and receive 100 objects,
   *   ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch
   *   the next page of the list. (optional)
   * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines
   *   your place in the list. For instance, if you make a list request and receive 100 objects,
   *   ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch
   *   the previous page of the list. (optional)
   * @return ListMessageFilesResponse
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun listMessageFiles(
    threadId: kotlin.String,
    messageId: kotlin.String,
    limit: kotlin.Int? = 20,
    order: OrderListMessageFiles? = OrderListMessageFiles.desc,
    after: kotlin.String? = null,
    before: kotlin.String? = null
  ): HttpResponse<ListMessageFilesResponse> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = io.ktor.client.utils.EmptyContent

    val localVariableQuery = mutableMapOf<String, List<String>>()
    limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
    order?.apply { localVariableQuery["order"] = listOf("$order") }
    after?.apply { localVariableQuery["after"] = listOf("$after") }
    before?.apply { localVariableQuery["before"] = listOf("$before") }
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/threads/{thread_id}/messages/{message_id}/files"
          .replace("{" + "thread_id" + "}", "$threadId")
          .replace("{" + "message_id" + "}", "$messageId"),
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return request(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /** enum for parameter order */
  @Serializable
  enum class OrderListMessages(val value: kotlin.String) {

    @SerialName(value = "asc") asc("asc"),
    @SerialName(value = "desc") desc("desc")
  }

  /**
   * Returns a list of messages for a given thread.
   *
   * @param threadId The ID of the [thread](/docs/api-reference/threads) the messages belong to.
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and
   *   100, and the default is 20. (optional, default to 20)
   * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60;
   *   for ascending order and &#x60;desc&#x60; for descending order. (optional, default to desc)
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines
   *   your place in the list. For instance, if you make a list request and receive 100 objects,
   *   ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch
   *   the next page of the list. (optional)
   * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines
   *   your place in the list. For instance, if you make a list request and receive 100 objects,
   *   ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch
   *   the previous page of the list. (optional)
   * @return ListMessagesResponse
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun listMessages(
    threadId: kotlin.String,
    limit: kotlin.Int? = 20,
    order: OrderListMessages? = OrderListMessages.desc,
    after: kotlin.String? = null,
    before: kotlin.String? = null
  ): HttpResponse<ListMessagesResponse> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = io.ktor.client.utils.EmptyContent

    val localVariableQuery = mutableMapOf<String, List<String>>()
    limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
    order?.apply { localVariableQuery["order"] = listOf("$order") }
    after?.apply { localVariableQuery["after"] = listOf("$after") }
    before?.apply { localVariableQuery["before"] = listOf("$before") }
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/threads/{thread_id}/messages".replace("{" + "thread_id" + "}", "$threadId"),
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return request(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /** enum for parameter order */
  @Serializable
  enum class OrderListRunSteps(val value: kotlin.String) {

    @SerialName(value = "asc") asc("asc"),
    @SerialName(value = "desc") desc("desc")
  }

  /**
   * Returns a list of run steps belonging to a run.
   *
   * @param threadId The ID of the thread the run and run steps belong to.
   * @param runId The ID of the run the run steps belong to.
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and
   *   100, and the default is 20. (optional, default to 20)
   * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60;
   *   for ascending order and &#x60;desc&#x60; for descending order. (optional, default to desc)
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines
   *   your place in the list. For instance, if you make a list request and receive 100 objects,
   *   ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch
   *   the next page of the list. (optional)
   * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines
   *   your place in the list. For instance, if you make a list request and receive 100 objects,
   *   ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch
   *   the previous page of the list. (optional)
   * @return ListRunStepsResponse
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun listRunSteps(
    threadId: kotlin.String,
    runId: kotlin.String,
    limit: kotlin.Int? = 20,
    order: OrderListRunSteps? = OrderListRunSteps.desc,
    after: kotlin.String? = null,
    before: kotlin.String? = null
  ): HttpResponse<ListRunStepsResponse> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = io.ktor.client.utils.EmptyContent

    val localVariableQuery = mutableMapOf<String, List<String>>()
    limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
    order?.apply { localVariableQuery["order"] = listOf("$order") }
    after?.apply { localVariableQuery["after"] = listOf("$after") }
    before?.apply { localVariableQuery["before"] = listOf("$before") }
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/threads/{thread_id}/runs/{run_id}/steps"
          .replace("{" + "thread_id" + "}", "$threadId")
          .replace("{" + "run_id" + "}", "$runId"),
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return request(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /** enum for parameter order */
  @Serializable
  enum class OrderListRuns(val value: kotlin.String) {

    @SerialName(value = "asc") asc("asc"),
    @SerialName(value = "desc") desc("desc")
  }

  /**
   * Returns a list of runs belonging to a thread.
   *
   * @param threadId The ID of the thread the run belongs to.
   * @param limit A limit on the number of objects to be returned. Limit can range between 1 and
   *   100, and the default is 20. (optional, default to 20)
   * @param order Sort order by the &#x60;created_at&#x60; timestamp of the objects. &#x60;asc&#x60;
   *   for ascending order and &#x60;desc&#x60; for descending order. (optional, default to desc)
   * @param after A cursor for use in pagination. &#x60;after&#x60; is an object ID that defines
   *   your place in the list. For instance, if you make a list request and receive 100 objects,
   *   ending with obj_foo, your subsequent call can include after&#x3D;obj_foo in order to fetch
   *   the next page of the list. (optional)
   * @param before A cursor for use in pagination. &#x60;before&#x60; is an object ID that defines
   *   your place in the list. For instance, if you make a list request and receive 100 objects,
   *   ending with obj_foo, your subsequent call can include before&#x3D;obj_foo in order to fetch
   *   the previous page of the list. (optional)
   * @return ListRunsResponse
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun listRuns(
    threadId: kotlin.String,
    limit: kotlin.Int? = 20,
    order: OrderListRuns? = OrderListRuns.desc,
    after: kotlin.String? = null,
    before: kotlin.String? = null
  ): HttpResponse<ListRunsResponse> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = io.ktor.client.utils.EmptyContent

    val localVariableQuery = mutableMapOf<String, List<String>>()
    limit?.apply { localVariableQuery["limit"] = listOf("$limit") }
    order?.apply { localVariableQuery["order"] = listOf("$order") }
    after?.apply { localVariableQuery["after"] = listOf("$after") }
    before?.apply { localVariableQuery["before"] = listOf("$before") }
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.GET,
        "/threads/{thread_id}/runs".replace("{" + "thread_id" + "}", "$threadId"),
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return request(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /**
   * Modifies a message.
   *
   * @param threadId The ID of the thread to which this message belongs.
   * @param messageId The ID of the message to modify.
   * @param modifyMessageRequest
   * @return MessageObject
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun modifyMessage(
    threadId: kotlin.String,
    messageId: kotlin.String,
    modifyMessageRequest: ModifyMessageRequest
  ): HttpResponse<MessageObject> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = modifyMessageRequest

    val localVariableQuery = mutableMapOf<String, List<String>>()
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.POST,
        "/threads/{thread_id}/messages/{message_id}"
          .replace("{" + "thread_id" + "}", "$threadId")
          .replace("{" + "message_id" + "}", "$messageId"),
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return jsonRequest(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /**
   * Modifies a run.
   *
   * @param threadId The ID of the [thread](/docs/api-reference/threads) that was run.
   * @param runId The ID of the run to modify.
   * @param modifyRunRequest
   * @return RunObject
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun modifyRun(
    threadId: kotlin.String,
    runId: kotlin.String,
    modifyRunRequest: ModifyRunRequest
  ): HttpResponse<RunObject> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = modifyRunRequest

    val localVariableQuery = mutableMapOf<String, List<String>>()
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.POST,
        "/threads/{thread_id}/runs/{run_id}"
          .replace("{" + "thread_id" + "}", "$threadId")
          .replace("{" + "run_id" + "}", "$runId"),
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return jsonRequest(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /**
   * Modifies a thread.
   *
   * @param threadId The ID of the thread to modify. Only the &#x60;metadata&#x60; can be modified.
   * @param modifyThreadRequest
   * @return ThreadObject
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun modifyThread(
    threadId: kotlin.String,
    modifyThreadRequest: ModifyThreadRequest
  ): HttpResponse<ThreadObject> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = modifyThreadRequest

    val localVariableQuery = mutableMapOf<String, List<String>>()
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.POST,
        "/threads/{thread_id}".replace("{" + "thread_id" + "}", "$threadId"),
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return jsonRequest(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /**
   * When a run has the &#x60;status: \&quot;requires_action\&quot;&#x60; and
   * &#x60;required_action.type&#x60; is &#x60;submit_tool_outputs&#x60;, this endpoint can be used
   * to submit the outputs from the tool calls once they&#39;re all completed. All outputs must be
   * submitted in a single request.
   *
   * @param threadId The ID of the [thread](/docs/api-reference/threads) to which this run belongs.
   * @param runId The ID of the run that requires the tool output submission.
   * @param submitToolOutputsRunRequest
   * @return RunObject
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun submitToolOuputsToRun(
    threadId: kotlin.String,
    runId: kotlin.String,
    submitToolOutputsRunRequest: SubmitToolOutputsRunRequest
  ): HttpResponse<RunObject> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = submitToolOutputsRunRequest

    val localVariableQuery = mutableMapOf<String, List<String>>()
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.POST,
        "/threads/{thread_id}/runs/{run_id}/submit_tool_outputs"
          .replace("{" + "thread_id" + "}", "$threadId")
          .replace("{" + "run_id" + "}", "$runId"),
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return jsonRequest(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }
}
