/**
 * Please note: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
@file:Suppress("ArrayInDataClass", "EnumEntryName", "RemoveRedundantQualifierName", "UnusedImport")

package com.xebia.functional.openai.apis

import com.xebia.functional.openai.infrastructure.*
import com.xebia.functional.openai.models.CreateImageEditRequestModel
import com.xebia.functional.openai.models.CreateImageRequest
import com.xebia.functional.openai.models.ImagesResponse
import io.ktor.client.HttpClient
import io.ktor.client.HttpClientConfig
import io.ktor.client.engine.HttpClientEngine
import io.ktor.client.request.forms.formData
import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*
import kotlinx.serialization.json.Json

open class ImagesApi : ApiClient {

  constructor(
    baseUrl: String = ApiClient.BASE_URL,
    httpClientEngine: HttpClientEngine? = null,
    httpClientConfig: ((HttpClientConfig<*>) -> Unit)? = null,
    jsonSerializer: Json = ApiClient.JSON_DEFAULT
  ) : super(
    baseUrl = baseUrl,
    httpClientEngine = httpClientEngine,
    httpClientConfig = httpClientConfig,
    jsonBlock = jsonSerializer
  )

  constructor(
    baseUrl: String,
    httpClient: HttpClient
  ) : super(baseUrl = baseUrl, httpClient = httpClient)

  /**
   * Creates an image given a prompt.
   *
   * @param createImageRequest
   * @return ImagesResponse
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun createImage(
    createImageRequest: CreateImageRequest
  ): HttpResponse<ImagesResponse> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = createImageRequest

    val localVariableQuery = mutableMapOf<String, List<String>>()
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.POST,
        "/images/generations",
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return jsonRequest(localVariableConfig, localVariableBody, localVariableAuthNames).wrap()
  }

  /** enum for parameter size */
  @Serializable
  enum class PropertySizeCreateImageEdit(val value: kotlin.String) {

    @SerialName(value = "256x256") _256x256("256x256"),
    @SerialName(value = "512x512") _512x512("512x512"),
    @SerialName(value = "1024x1024") _1024x1024("1024x1024")
  }

  /** enum for parameter responseFormat */
  @Serializable
  enum class ResponseFormatCreateImageEdit(val value: kotlin.String) {

    @SerialName(value = "url") url("url"),
    @SerialName(value = "b64_json") b64Json("b64_json")
  }

  /**
   * Creates an edited or extended image given an original image and a prompt.
   *
   * @param image The image to edit. Must be a valid PNG file, less than 4MB, and square. If mask is
   *   not provided, image must have transparency, which will be used as the mask.
   * @param prompt A text description of the desired image(s). The maximum length is 1000
   *   characters.
   * @param mask An additional image whose fully transparent areas (e.g. where alpha is zero)
   *   indicate where &#x60;image&#x60; should be edited. Must be a valid PNG file, less than 4MB,
   *   and have the same dimensions as &#x60;image&#x60;. (optional)
   * @param model (optional)
   * @param n The number of images to generate. Must be between 1 and 10. (optional, default to 1)
   * @param size The size of the generated images. Must be one of &#x60;256x256&#x60;,
   *   &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;. (optional, default to 1024x1024)
   * @param responseFormat The format in which the generated images are returned. Must be one of
   *   &#x60;url&#x60; or &#x60;b64_json&#x60;. (optional, default to url)
   * @param user A unique identifier representing your end-user, which can help OpenAI to monitor
   *   and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). (optional)
   * @return ImagesResponse
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun createImageEdit(
    image: io.ktor.client.request.forms.InputProvider,
    prompt: kotlin.String,
    mask: io.ktor.client.request.forms.InputProvider? = null,
    model: CreateImageEditRequestModel? = null,
    n: kotlin.Int? = 1,
    size: PropertySizeCreateImageEdit? = PropertySizeCreateImageEdit._1024x1024,
    responseFormat: ResponseFormatCreateImageEdit? = ResponseFormatCreateImageEdit.url,
    user: kotlin.String? = null
  ): HttpResponse<ImagesResponse> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = formData {
      image?.apply { appendGen("image", image) }
      prompt?.apply { appendGen("prompt", prompt) }
      mask?.apply { appendGen("mask", mask) }
      model?.apply { appendGen("model", model) }
      n?.apply { appendGen("n", n) }
      size?.apply { appendGen("size", size) }
      responseFormat?.apply { appendGen("response_format", responseFormat) }
      user?.apply { appendGen("user", user) }
    }

    val localVariableQuery = mutableMapOf<String, List<String>>()
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.POST,
        "/images/edits",
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return multipartFormRequest(localVariableConfig, localVariableBody, localVariableAuthNames)
      .wrap()
  }

  /** enum for parameter responseFormat */
  @Serializable
  enum class ResponseFormatCreateImageVariation(val value: kotlin.String) {

    @SerialName(value = "url") url("url"),
    @SerialName(value = "b64_json") b64Json("b64_json")
  }

  /** enum for parameter size */
  @Serializable
  enum class PropertySizeCreateImageVariation(val value: kotlin.String) {

    @SerialName(value = "256x256") _256x256("256x256"),
    @SerialName(value = "512x512") _512x512("512x512"),
    @SerialName(value = "1024x1024") _1024x1024("1024x1024")
  }

  /**
   * Creates a variation of a given image.
   *
   * @param image The image to use as the basis for the variation(s). Must be a valid PNG file, less
   *   than 4MB, and square.
   * @param model (optional)
   * @param n The number of images to generate. Must be between 1 and 10. For &#x60;dall-e-3&#x60;,
   *   only &#x60;n&#x3D;1&#x60; is supported. (optional, default to 1)
   * @param responseFormat The format in which the generated images are returned. Must be one of
   *   &#x60;url&#x60; or &#x60;b64_json&#x60;. (optional, default to url)
   * @param size The size of the generated images. Must be one of &#x60;256x256&#x60;,
   *   &#x60;512x512&#x60;, or &#x60;1024x1024&#x60;. (optional, default to 1024x1024)
   * @param user A unique identifier representing your end-user, which can help OpenAI to monitor
   *   and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids). (optional)
   * @return ImagesResponse
   */
  @Suppress("UNCHECKED_CAST")
  open suspend fun createImageVariation(
    image: io.ktor.client.request.forms.InputProvider,
    model: CreateImageEditRequestModel? = null,
    n: kotlin.Int? = 1,
    responseFormat: ResponseFormatCreateImageVariation? = ResponseFormatCreateImageVariation.url,
    size: PropertySizeCreateImageVariation? = PropertySizeCreateImageVariation._1024x1024,
    user: kotlin.String? = null
  ): HttpResponse<ImagesResponse> {

    val localVariableAuthNames = listOf<String>("ApiKeyAuth")

    val localVariableBody = formData {
      image?.apply { appendGen("image", image) }
      model?.apply { appendGen("model", model) }
      n?.apply { appendGen("n", n) }
      responseFormat?.apply { appendGen("response_format", responseFormat) }
      size?.apply { appendGen("size", size) }
      user?.apply { appendGen("user", user) }
    }

    val localVariableQuery = mutableMapOf<String, List<String>>()
    val localVariableHeaders = mutableMapOf<String, String>()

    val localVariableConfig =
      RequestConfig<kotlin.Any?>(
        RequestMethod.POST,
        "/images/variations",
        query = localVariableQuery,
        headers = localVariableHeaders,
        requiresAuthentication = true,
      )

    return multipartFormRequest(localVariableConfig, localVariableBody, localVariableAuthNames)
      .wrap()
  }
}
