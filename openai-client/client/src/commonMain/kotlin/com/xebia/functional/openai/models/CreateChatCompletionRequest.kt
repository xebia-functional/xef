/**
 * Please note: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
@file:Suppress("ArrayInDataClass", "EnumEntryName", "RemoveRedundantQualifierName", "UnusedImport")

package com.xebia.functional.openai.models

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * @param messages A list of messages comprising the conversation so far.
 *   [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models).
 * @param model
 * @param frequencyPenalty Number between -2.0 and 2.0. Positive values penalize new tokens based on
 *   their existing frequency in the text so far, decreasing the model's likelihood to repeat the
 *   same line verbatim.
 *   [See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details)
 * @param logitBias Modify the likelihood of specified tokens appearing in the completion. Accepts a
 *   JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated
 *   bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the
 *   model prior to sampling. The exact effect will vary per model, but values between -1 and 1
 *   should decrease or increase likelihood of selection; values like -100 or 100 should result in a
 *   ban or exclusive selection of the relevant token.
 * @param maxTokens The maximum number of [tokens](/tokenizer) to generate in the chat completion.
 *   The total length of input tokens and generated tokens is limited by the model's context length.
 *   [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)
 *   for counting tokens.
 * @param n How many chat completion choices to generate for each input message.
 * @param presencePenalty Number between -2.0 and 2.0. Positive values penalize new tokens based on
 *   whether they appear in the text so far, increasing the model's likelihood to talk about new
 *   topics.
 *   [See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details)
 * @param responseFormat
 * @param seed This feature is in Beta. If specified, our system will make a best effort to sample
 *   deterministically, such that repeated requests with the same `seed` and parameters should
 *   return the same result. Determinism is not guaranteed, and you should refer to the
 *   `system_fingerprint` response parameter to monitor changes in the backend.
 * @param stop
 * @param stream If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent
 *   as data-only
 *   [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
 *   as they become available, with the stream terminated by a `data: [DONE]` message.
 *   [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
 * @param temperature What sampling temperature to use, between 0 and 2. Higher values like 0.8 will
 *   make the output more random, while lower values like 0.2 will make it more focused and
 *   deterministic. We generally recommend altering this or `top_p` but not both.
 * @param topP An alternative to sampling with temperature, called nucleus sampling, where the model
 *   considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens
 *   comprising the top 10% probability mass are considered. We generally recommend altering this or
 *   `temperature` but not both.
 * @param tools A list of tools the model may call. Currently, only functions are supported as a
 *   tool. Use this to provide a list of functions the model may generate JSON inputs for.
 * @param toolChoice
 * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and
 *   detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
 * @param functionCall
 * @param functions Deprecated in favor of `tools`. A list of functions the model may generate JSON
 *   inputs for.
 */
@Serializable
data class CreateChatCompletionRequest(

  /* A list of messages comprising the conversation so far. [Example Python code](https://cookbook.openai.com/examples/how_to_format_inputs_to_chatgpt_models). */
  @SerialName(value = "messages")
  @Required
  val messages:
    kotlin.collections.List<
      com.xebia.functional.openai.models.ext.chat.ChatCompletionRequestMessage
    >,
  @SerialName(value = "model")
  @Required
  val model: com.xebia.functional.openai.models.ext.chat.create.CreateChatCompletionRequestModel,

  /* Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details)  */
  @SerialName(value = "frequency_penalty") val frequencyPenalty: kotlin.Double? = (0).toDouble(),

  /* Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the tokenizer) to an associated bias value from -100 to 100. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  */
  @SerialName(value = "logit_bias")
  val logitBias: kotlin.collections.Map<kotlin.String, kotlin.Int>? = null,

  /* The maximum number of [tokens](/tokenizer) to generate in the chat completion.  The total length of input tokens and generated tokens is limited by the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.  */
  @SerialName(value = "max_tokens") val maxTokens: kotlin.Int? = null,

  /* How many chat completion choices to generate for each input message. */
  @SerialName(value = "n") val n: kotlin.Int? = 1,

  /* Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details)  */
  @SerialName(value = "presence_penalty") val presencePenalty: kotlin.Double? = (0).toDouble(),
  @SerialName(value = "response_format")
  val responseFormat: CreateChatCompletionRequestResponseFormat? = null,

  /* This feature is in Beta.  If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result. Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.  */
  @SerialName(value = "seed") val seed: kotlin.Int? = null,
  @SerialName(value = "stop")
  val stop: com.xebia.functional.openai.models.ext.chat.create.CreateChatCompletionRequestStop? =
    null,

  /* If set, partial message deltas will be sent, like in ChatGPT. Tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).  */
  @SerialName(value = "stream") val stream: kotlin.Boolean? = false,

  /* What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both.  */
  @SerialName(value = "temperature") val temperature: kotlin.Double? = (1).toDouble(),

  /* An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both.  */
  @SerialName(value = "top_p") val topP: kotlin.Double? = (1).toDouble(),

  /* A list of tools the model may call. Currently, only functions are supported as a tool. Use this to provide a list of functions the model may generate JSON inputs for.  */
  @SerialName(value = "tools") val tools: kotlin.collections.List<ChatCompletionTool>? = null,
  @SerialName(value = "tool_choice") val toolChoice: ChatCompletionToolChoiceOption? = null,

  /* A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  */
  @SerialName(value = "user") val user: kotlin.String? = null,
  @Deprecated(message = "This property is deprecated.")
  @SerialName(value = "function_call")
  val functionCall: CreateChatCompletionRequestFunctionCall? = null,

  /* Deprecated in favor of `tools`.  A list of functions the model may generate JSON inputs for.  */
  @Deprecated(message = "This property is deprecated.")
  @SerialName(value = "functions")
  val functions: kotlin.collections.List<ChatCompletionFunctions>? = null
)
