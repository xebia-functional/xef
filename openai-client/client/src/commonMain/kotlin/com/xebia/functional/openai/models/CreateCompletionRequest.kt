/**
 * Please note: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
@file:Suppress("ArrayInDataClass", "EnumEntryName", "RemoveRedundantQualifierName", "UnusedImport")

package com.xebia.functional.openai.models

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * @param model
 * @param prompt
 * @param bestOf Generates `best_of` completions server-side and returns the \"best\" (the one with
 *   the highest log probability per token). Results cannot be streamed. When used with `n`,
 *   `best_of` controls the number of candidate completions and `n` specifies how many to return –
 *   `best_of` must be greater than `n`. **Note:** Because this parameter generates many
 *   completions, it can quickly consume your token quota. Use carefully and ensure that you have
 *   reasonable settings for `max_tokens` and `stop`.
 * @param echo Echo back the prompt in addition to the completion
 * @param frequencyPenalty Number between -2.0 and 2.0. Positive values penalize new tokens based on
 *   their existing frequency in the text so far, decreasing the model's likelihood to repeat the
 *   same line verbatim.
 *   [See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details)
 * @param logitBias Modify the likelihood of specified tokens appearing in the completion. Accepts a
 *   JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an
 *   associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe)
 *   (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias
 *   is added to the logits generated by the model prior to sampling. The exact effect will vary per
 *   model, but values between -1 and 1 should decrease or increase likelihood of selection; values
 *   like -100 or 100 should result in a ban or exclusive selection of the relevant token. As an
 *   example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being
 *   generated.
 * @param logprobs Include the log probabilities on the `logprobs` most likely tokens, as well the
 *   chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely
 *   tokens. The API will always return the `logprob` of the sampled token, so there may be up to
 *   `logprobs+1` elements in the response. The maximum value for `logprobs` is 5.
 * @param maxTokens The maximum number of [tokens](/tokenizer) to generate in the completion. The
 *   token count of your prompt plus `max_tokens` cannot exceed the model's context length.
 *   [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken)
 *   for counting tokens.
 * @param n How many completions to generate for each prompt. **Note:** Because this parameter
 *   generates many completions, it can quickly consume your token quota. Use carefully and ensure
 *   that you have reasonable settings for `max_tokens` and `stop`.
 * @param presencePenalty Number between -2.0 and 2.0. Positive values penalize new tokens based on
 *   whether they appear in the text so far, increasing the model's likelihood to talk about new
 *   topics.
 *   [See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details)
 * @param seed If specified, our system will make a best effort to sample deterministically, such
 *   that repeated requests with the same `seed` and parameters should return the same result.
 *   Determinism is not guaranteed, and you should refer to the `system_fingerprint` response
 *   parameter to monitor changes in the backend.
 * @param stop
 * @param stream Whether to stream back partial progress. If set, tokens will be sent as data-only
 *   [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format)
 *   as they become available, with the stream terminated by a `data: [DONE]` message.
 *   [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).
 * @param suffix The suffix that comes after a completion of inserted text.
 * @param temperature What sampling temperature to use, between 0 and 2. Higher values like 0.8 will
 *   make the output more random, while lower values like 0.2 will make it more focused and
 *   deterministic. We generally recommend altering this or `top_p` but not both.
 * @param topP An alternative to sampling with temperature, called nucleus sampling, where the model
 *   considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens
 *   comprising the top 10% probability mass are considered. We generally recommend altering this or
 *   `temperature` but not both.
 * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and
 *   detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
 */
@Serializable
data class CreateCompletionRequest(
  @SerialName(value = "model")
  @Required
  val model: com.xebia.functional.openai.models.ext.completion.create.CreateCompletionRequestModel,
  @SerialName(value = "prompt")
  @Required
  val prompt:
    com.xebia.functional.openai.models.ext.completion.create.CreateCompletionRequestPrompt?,

  /* Generates `best_of` completions server-side and returns the \"best\" (the one with the highest log probability per token). Results cannot be streamed.  When used with `n`, `best_of` controls the number of candidate completions and `n` specifies how many to return – `best_of` must be greater than `n`.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.  */
  @SerialName(value = "best_of") val bestOf: kotlin.Int? = 1,

  /* Echo back the prompt in addition to the completion  */
  @SerialName(value = "echo") val echo: kotlin.Boolean? = false,

  /* Number between -2.0 and 2.0. Positive values penalize new tokens based on their existing frequency in the text so far, decreasing the model's likelihood to repeat the same line verbatim.  [See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details)  */
  @SerialName(value = "frequency_penalty") val frequencyPenalty: kotlin.Double? = (0).toDouble(),

  /* Modify the likelihood of specified tokens appearing in the completion.  Accepts a JSON object that maps tokens (specified by their token ID in the GPT tokenizer) to an associated bias value from -100 to 100. You can use this [tokenizer tool](/tokenizer?view=bpe) (which works for both GPT-2 and GPT-3) to convert text to token IDs. Mathematically, the bias is added to the logits generated by the model prior to sampling. The exact effect will vary per model, but values between -1 and 1 should decrease or increase likelihood of selection; values like -100 or 100 should result in a ban or exclusive selection of the relevant token.  As an example, you can pass `{\"50256\": -100}` to prevent the <|endoftext|> token from being generated.  */
  @SerialName(value = "logit_bias")
  val logitBias: kotlin.collections.Map<kotlin.String, kotlin.Int>? = null,

  /* Include the log probabilities on the `logprobs` most likely tokens, as well the chosen tokens. For example, if `logprobs` is 5, the API will return a list of the 5 most likely tokens. The API will always return the `logprob` of the sampled token, so there may be up to `logprobs+1` elements in the response.  The maximum value for `logprobs` is 5.  */
  @SerialName(value = "logprobs") val logprobs: kotlin.Int? = null,

  /* The maximum number of [tokens](/tokenizer) to generate in the completion.  The token count of your prompt plus `max_tokens` cannot exceed the model's context length. [Example Python code](https://cookbook.openai.com/examples/how_to_count_tokens_with_tiktoken) for counting tokens.  */
  @SerialName(value = "max_tokens") val maxTokens: kotlin.Int? = 16,

  /* How many completions to generate for each prompt.  **Note:** Because this parameter generates many completions, it can quickly consume your token quota. Use carefully and ensure that you have reasonable settings for `max_tokens` and `stop`.  */
  @SerialName(value = "n") val n: kotlin.Int? = 1,

  /* Number between -2.0 and 2.0. Positive values penalize new tokens based on whether they appear in the text so far, increasing the model's likelihood to talk about new topics.  [See more information about frequency and presence penalties.](/docs/guides/gpt/parameter-details)  */
  @SerialName(value = "presence_penalty") val presencePenalty: kotlin.Double? = (0).toDouble(),

  /* If specified, our system will make a best effort to sample deterministically, such that repeated requests with the same `seed` and parameters should return the same result.  Determinism is not guaranteed, and you should refer to the `system_fingerprint` response parameter to monitor changes in the backend.  */
  @SerialName(value = "seed") val seed: kotlin.Int? = null,
  @SerialName(value = "stop")
  val stop: com.xebia.functional.openai.models.ext.completion.create.CreateCompletionRequestStop? =
    null,

  /* Whether to stream back partial progress. If set, tokens will be sent as data-only [server-sent events](https://developer.mozilla.org/en-US/docs/Web/API/Server-sent_events/Using_server-sent_events#Event_stream_format) as they become available, with the stream terminated by a `data: [DONE]` message. [Example Python code](https://cookbook.openai.com/examples/how_to_stream_completions).  */
  @SerialName(value = "stream") val stream: kotlin.Boolean? = false,

  /* The suffix that comes after a completion of inserted text. */
  @SerialName(value = "suffix") val suffix: kotlin.String? = null,

  /* What sampling temperature to use, between 0 and 2. Higher values like 0.8 will make the output more random, while lower values like 0.2 will make it more focused and deterministic.  We generally recommend altering this or `top_p` but not both.  */
  @SerialName(value = "temperature") val temperature: kotlin.Double? = (1).toDouble(),

  /* An alternative to sampling with temperature, called nucleus sampling, where the model considers the results of the tokens with top_p probability mass. So 0.1 means only the tokens comprising the top 10% probability mass are considered.  We generally recommend altering this or `temperature` but not both.  */
  @SerialName(value = "top_p") val topP: kotlin.Double? = (1).toDouble(),

  /* A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  */
  @SerialName(value = "user") val user: kotlin.String? = null
)
