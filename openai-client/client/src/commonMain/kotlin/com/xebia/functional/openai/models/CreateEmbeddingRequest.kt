/**
 * Please note: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * Do not edit this file manually.
 */
@file:Suppress("ArrayInDataClass", "EnumEntryName", "RemoveRedundantQualifierName", "UnusedImport")

package com.xebia.functional.openai.models

import kotlinx.serialization.*
import kotlinx.serialization.descriptors.*
import kotlinx.serialization.encoding.*

/**
 * @param input
 * @param model
 * @param encodingFormat The format to return the embeddings in. Can be either `float` or
 *   [`base64`](https://pypi.org/project/pybase64/).
 * @param dimensions The number of dimensions the resulting output embeddings should have. Only
 *   supported in `text-embedding-3` and later models.
 * @param user A unique identifier representing your end-user, which can help OpenAI to monitor and
 *   detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).
 */
@Serializable
data class CreateEmbeddingRequest(
  @SerialName(value = "input")
  @Required
  val input: com.xebia.functional.openai.models.ext.embedding.create.CreateEmbeddingRequestInput,
  @SerialName(value = "model")
  @Required
  val model: ai.xef.openai.OpenAIModel<CreateEmbeddingRequestModel>,

  /* The format to return the embeddings in. Can be either `float` or [`base64`](https://pypi.org/project/pybase64/). */
  @SerialName(value = "encoding_format")
  val encodingFormat: CreateEmbeddingRequest.EncodingFormat? = EncodingFormat.float,

  /* The number of dimensions the resulting output embeddings should have. Only supported in `text-embedding-3` and later models.  */
  @SerialName(value = "dimensions") val dimensions: kotlin.Int? = null,

  /* A unique identifier representing your end-user, which can help OpenAI to monitor and detect abuse. [Learn more](/docs/guides/safety-best-practices/end-user-ids).  */
  @SerialName(value = "user") val user: kotlin.String? = null
) {

  /**
   * The format to return the embeddings in. Can be either `float` or
   * [`base64`](https://pypi.org/project/pybase64/).
   *
   * Values: float,base64
   */
  @Serializable
  enum class EncodingFormat(val value: kotlin.String) {
    @SerialName(value = "float") float("float"),
    @SerialName(value = "base64") base64("base64")
  }
}
