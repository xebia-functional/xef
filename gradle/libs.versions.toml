[versions]
arrow = "1.2.0-RC"
arrowGradle = "0.12.0-rc.3"
kotlin = "1.8.22"
openai = "0.14.0"
kotlinx-json = "1.5.1"
ktor = "2.3.1"
spotless = "6.19.0"
okio = "3.3.0"
kotest = "5.6.2"
kotest-testcontainers = "2.0.0"
kotest-arrow = "1.3.3"
klogging = "4.0.0-beta-29"
uuid = "0.0.20"
postgresql = "42.6.0"
testcontainers = "1.18.3"
hikari = "5.0.1"
dokka = "1.8.20"
logback = "1.4.8"
kotlinx-coroutines = "1.7.1"
scalaMultiversion = "2.0.4"
circe = "0.14.5"
catsEffect = "3.6-0142603"
munit = "0.7.29"
munitCatsEffect = "1.0.7"
scrapeit = "1.1.5"
rssreader = "3.4.5"
lucene = "9.7.0"
assertj = "3.24.2"
junit = "5.9.3"
pdfbox = "2.0.28"
mysql = "8.0.33"
semverGradle = "0.5.0-alpha.2"
scala = "3.3.0"
openai-client-version = "3.3.0"

[libraries]
arrow-core = { module = "io.arrow-kt:arrow-core", version.ref = "arrow" }
arrow-fx-coroutines = { module = "io.arrow-kt:arrow-fx-coroutines", version.ref = "arrow" }
open-ai = { module = "com.theokanning.openai-gpt3-java:service", version.ref = "openai" }
kotlinx-serialization-json = { module = "org.jetbrains.kotlinx:kotlinx-serialization-json", version.ref = "kotlinx-json" }
kotlinx-coroutines = { module = "org.jetbrains.kotlinx:kotlinx-coroutines-core", version.ref="kotlinx-coroutines" }
ktor-client = { module = "io.ktor:ktor-client-core", version.ref = "ktor" }
ktor-client-js = { module = "io.ktor:ktor-client-js", version.ref = "ktor" }
ktor-client-cio = { module = "io.ktor:ktor-client-cio", version.ref = "ktor" }
ktor-client-winhttp = { module = "io.ktor:ktor-client-winhttp", version.ref = "ktor" }
ktor-client-content-negotiation = { module = "io.ktor:ktor-client-content-negotiation", version.ref = "ktor" }
ktor-client-serialization = { module = "io.ktor:ktor-serialization-kotlinx-json", version.ref = "ktor" }
okio = { module = "com.squareup.okio:okio", version.ref = "okio" }
okio-fakefilesystem = { module = "com.squareup.okio:okio-fakefilesystem", version.ref = "okio" }
okio-nodefilesystem = { module = "com.squareup.okio:okio-nodefilesystem", version.ref = "okio" }
kotest-assertions = { module = "io.kotest:kotest-assertions-core", version.ref = "kotest" }
kotest-framework = { module = "io.kotest:kotest-framework-engine", version.ref = "kotest" }
kotest-property = { module = "io.kotest:kotest-property", version.ref = "kotest" }
kotest-junit5 = { module = "io.kotest:kotest-runner-junit5", version.ref = "kotest" }
kotest-testcontainers = { module = "io.kotest.extensions:kotest-extensions-testcontainers", version.ref = "kotest-testcontainers" }
kotest-assertions-arrow = { module = "io.kotest.extensions:kotest-assertions-arrow", version.ref = "kotest-arrow" }
junit-jupiter-api = { module = "org.junit.jupiter:junit-jupiter-api", version.ref = "junit" }
uuid = { module = "app.softwork:kotlinx-uuid-core", version.ref = "uuid" }
klogging = { module = "io.github.oshai:kotlin-logging", version.ref = "klogging"  }
hikari = { module = "com.zaxxer:HikariCP", version.ref = "hikari" }
postgresql = { module = "org.postgresql:postgresql", version.ref = "postgresql" }
testcontainers-postgresql = { module = "org.testcontainers:postgresql", version.ref = "testcontainers" }
logback = { module = "ch.qos.logback:logback-classic", version.ref = "logback" }
circe = { module = "io.circe:circe-generic_3", version.ref = "circe" }
circe-parser = { module = "io.circe:circe-parser_3", version.ref = "circe" }
cats-effect = { module = "org.typelevel:cats-effect_3", version.ref = "catsEffect" }
munit-core = { module = "org.scalameta:munit_3", version.ref = "munit" }
munit-cats-effect = { module = "org.typelevel:munit-cats-effect-3_3", version.ref = "munitCatsEffect" }
skrape = { module = "it.skrape:skrapeit", version.ref = "scrapeit" }
skrape-browser-fetcher = { module = "it.skrape:skrapeit-browser-fetcher", version.ref = "scrapeit" }
skrape-async-fetcher = { module = "it.skrape:skrapeit-asyn-fetcher", version.ref = "scrapeit" }
rss-reader = { module = "com.apptasticsoftware:rssreader", version.ref = "rssreader" }
lucene-core = { module = "org.apache.lucene:lucene-core", version.ref = "lucene" }
lucene-queries = { module = "org.apache.lucene:lucene-queries", version.ref = "lucene" }
assertj = { module = "org.assertj:assertj-core", version.ref = "assertj" }
apache-pdf-box = { module = "org.apache.pdfbox:pdfbox", version.ref = "pdfbox" }
jdbc-mysql-connector = { module = "mysql:mysql-connector-java", version.ref = "mysql" }
scala-lang = { module = "org.scala-lang:scala3-library_3", version.ref = "scala" }
openai-client = { module = "com.aallam.openai:openai-client", version.ref = "openai-client-version" }

[bundles]
arrow = [
    "arrow-core",
    "arrow-fx-coroutines"
]
ktor-client = [
    "ktor-client",
    "ktor-client-content-negotiation",
    "ktor-client-serialization"
]

[plugins]
kotlin-multiplatform = { id = "org.jetbrains.kotlin.multiplatform", version.ref = "kotlin" }
kotlin-jvm = { id = "org.jetbrains.kotlin.jvm", version.ref = "kotlin" }
kotlin-js = { id = "org.jetbrains.kotlin.js", version.ref = "kotlin" }
kotlinx-serialization = { id = "org.jetbrains.kotlin.plugin.serialization", version.ref = "kotlin" }
spotless = { id = "com.diffplug.spotless", version.ref = "spotless" }
dokka = { id = "org.jetbrains.dokka", version.ref = "dokka" }
arrow-gradle-nexus = { id = "io.arrow-kt.arrow-gradle-config-nexus", version.ref = "arrowGradle" }
arrow-gradle-publish = { id = "io.arrow-kt.arrow-gradle-config-publish", version.ref = "arrowGradle" }
scala-multiversion  = { id = "com.adtran.scala-multiversion-plugin", version.ref = "scalaMultiversion" }
kotest-multiplatform = { id = "io.kotest.multiplatform", version.ref = "kotest" }
semver-gradle = { id="com.javiersc.semver", version.ref="semverGradle" }
