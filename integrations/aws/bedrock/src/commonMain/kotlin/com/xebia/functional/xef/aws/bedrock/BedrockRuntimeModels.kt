package com.xebia.functional.xef.aws.bedrock

import kotlinx.serialization.SerialName
import kotlinx.serialization.Serializable

/**
 * The Anthropic Claude model returns the following fields for a messages inference call.
 *
 * { "id": string, "model": string, "type" : "message", "role" : "assistant", "content":
 * [ { "type": "text", "text": string } ], "stop_reason": string, "stop_sequence": string, "usage":
 * { "input_tokens": integer, "output_tokens": integer }
 *
 * } id – The unique identifier for the response. The format and length of the ID might change over
 * time.
 *
 * model – The ID for the Anthropic Claude model that made the request.
 *
 * stop_reason – The reason why Anthropic Claude stopped generating the response.
 *
 * end_turn – The model reached a natural stopping point
 *
 * max_tokens – The generated text exceeded the value of the max_tokens input field or exceeded the
 * maximum number of tokens that the model supports.' .
 *
 * stop_sequence – The model generated one of the stop sequences that you specified in the
 * stop_sequences input field.
 *
 * type – The type of response. The value is always message.
 *
 * role – The conversational role of the generated message. The value is always assistant.
 *
 * content – The content generated by the model. Returned as an array.
 *
 * type – The type of the content. Currently the only supported value is text.
 *
 * text – The text of the content.
 *
 * usage – Container for the number of tokens that you supplied in the request and the number tokens
 * of that the model generated in the response.
 *
 * input_tokens – The number of input tokens in the request.
 *
 * output_tokens – The number tokens of that the model generated in the response.
 *
 * stop_sequence – The model generated one of the stop sequences that you specified in the
 * stop_sequences input field.
 */
@Serializable
data class ChatCompletionResponse(
  val id: String,
  val model: String,
  val type: String,
  val role: String,
  val content: List<Content>,
  @SerialName("stop_reason") val stopReason: String? = null,
  @SerialName("stop_sequence") val stopSequence: String? = null,
  val usage: Usage? = null
) {
  @Serializable data class Content(val type: String, val text: String)

  @Serializable
  data class Usage(
    @SerialName("input_tokens") val inputTokens: Int? = null,
    @SerialName("output_tokens") val outputTokens: Int? = null
  )
}
